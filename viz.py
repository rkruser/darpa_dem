"""
This script runs a syllabus for classification data tasks using a pre-generated HDF5 datafile, and provides a
visualization of the returned data. This HDF5 file can be generated by running

    python examples/classification_tasks/datagen/l2a_gen.py

(See README or actual code for more information on use.)

The L2DATA environment variable should be set before running this script (see classification_tasks README), which
specifies the top-level folder under which to look for the pre-generated data. If not set, the default is 'l2data' under
the root directory, e.g. ~/l2data on Linux/Mac.

Note that this code is provided only as an example to illustrate how classification data may be visualized, and what the
data may look like to a model. This is not intended to be a tool for data visualization in general.
"""

import argparse

import learnkit
from learnkit.utils import module_relative_file
import numpy as np
from matplotlib import pyplot as plt


def visualize_batch(syllabus_name, x, y, num_examples=1, pause=5):
    """
    Show images of some of the examples of the batch; specific to the following syllabi:
       - predict_task_syllabus
       - predict_total_reward_syllabus
       - predict_frame_n_syllabus
    :param syllabus_name: (str) which syllabus to plot data for
    :param x: (dict) output of 'input' key to batch
    :param y: (dict) output of 'output' key to batch
    :param num_examples: (int) how many examples to plot from the batch. If greater than the size of the batch, it
        shows all of the examples
    :param pause: (int or float) how long to pause in seconds between plots
    :return: None
    """
    input_key = list(x.keys())[0]
    output_key = list(y.keys())[0]
    
    if num_examples > len(x[input_key]):
        num_examples = len(x[input_key])

    for i in range(num_examples):
        if syllabus_name == 'predict_frame_n_syllabus':
            if len(x[input_key].shape) == 5 and x[input_key].shape[2] != 1:  # multi-frame input
                sequence_length = x[input_key].shape[2]  # idx 2 is the number of frames in the example
                fig, axs = plt.subplots(sequence_length, 2, figsize=(10, 8))
                for j in range(sequence_length):
                    # Input dimensions are (example, channel, frame, image_height, image_width), where frame is
                    #  provided because the input consists of a sequence of 3x84x84 frames. Then we shift the
                    #  image dimensions to (image_height, image_width, channels) to be read by pyplot.imshow().
                    axs[j, 0].imshow(np.transpose(x[input_key][i, :, j, :, :], (1, 2, 0)))
                    # Output dimensions are similar to input, but only includes one frame, so that dimension is omitted.
                    axs[j, 1].imshow(np.transpose(y[output_key][i], (1, 2, 0)))
            else:  # single frame input
                fig, axs = plt.subplots(1, figsize=(8, 8))
                axs[0, 0].imshow(np.transpose(x[input_key][i, :, 0, :, :], (1, 2, 0)))
                axs[0, 1].imshow(np.transpose(y[output_key][i], (1, 2, 0)))
            # display example number and how many frames forward the learning agent is supposed to predict
            fig.suptitle('Example ' + str(i) + '\nframes forward to predict:' + str(x['num_frames_ahead']))
            # set image labeling
            axs[-1, 0].set(xlabel='input')
            axs[-1, 1].set(xlabel='output')
            for ax in axs.flat:
                ax.label_outer()
        else:
            if len(x[input_key].shape) == 5 and x[input_key].shape[2] != 1:  # multi-frame input
                sequence_length = x[input_key].shape[2]  # idx 2 is the number of frames in the example
                fig, axs = plt.subplots(sequence_length, figsize=(10, 8))
                for j in range(sequence_length):
                    # see above for explanation on slicing and transpose
                    axs[j].imshow(np.transpose(x[input_key][i, :, j, :, :], (1, 2, 0)))
            else:  # single frame input
                fig, axs = plt.subplots(1, figsize=(8, 8))
                axs.imshow(np.transpose(x[input_key][i, :, 0, :, :], (1, 2, 0)))
            fig.suptitle('Example ' + str(i) + '\n' + output_key + '=' + str(y[output_key][i][0]))
        plt.waitforbuttonpress(timeout=pause)
        plt.close(fig)


def run_syllabus(path_to_syllabus, syllabus_name):
    cl = learnkit.Classroom()
    with cl.load(path_to_syllabus) as syllabus:
        syllabus.reset()
        for dataset in syllabus.datasets():
            done = False
            dataset.reset()
            output_spaces = dataset.get_output_spaces()
            while not done:
                batch, done, info = dataset.next_batch()
                if batch:
                    x = batch['inputs']
                    estimates = dict((key, output_spaces[key].sample()) for key in output_spaces.keys())
                    y = dataset.get_labels(batch['id'], estimates)
                    visualize_batch(syllabus_name, x, y, num_examples=2, pause=10)


if __name__ == "__main__":
    #syllabi = ['predict_task_syllabus', 'predict_total_reward_syllabus', 'predict_frame_n_syllabus']

    parser = argparse.ArgumentParser(description="Sample classification task training script.")
    parser.add_argument('--syllabus', choices=syllabi, default='viz_predict_total_reward_syllabus')
    args = parser.parse_args()

    load_syllabus = args.syllabus
    run_syllabus(module_relative_file(__file__, load_syllabus), load_syllabus)
